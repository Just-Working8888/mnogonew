import React, { useEffect, useState } from 'react';
import PizzaCard from '../PizzaCard/PizzaCard';
import { useAppDispatch, useAppSelector } from '../../store/hook';
import { setOffcet } from '../../store/slices/windowSlice';
import CardSceleton from '../Sceletons/CardSceleton/CardSceleton';
import { Divider } from 'antd';
import InfiniteScroll from 'react-infinite-scroll-component';
import { IProduct } from '../../store/models/IProduct';
import { fetchProduct } from '../../store/reducers/productReduser';
import { formatParams } from '../../helpers/convertProps';
import { setTargetId } from '../../store/slices/scroolSlice';

const PizzaList: React.FC = () => {
    const pizzas = [
        {
            image: '/images/pizza1.png',
            name: '–ú—è—Å–Ω–∞—è —Å –∞–¥–∂–∏–∫–æ–π',
            description: '–û—Ö–æ—Ç–Ω–∏—á—å–∏ –∫–æ–ª–±–∞—Å–∫–∏, –æ—Å—Ç—Ä—ã–π —Å–æ—É—Å –∞–¥–∂–∏–∫–∞, –∫–æ–ª–±–∞—Å–∫–∏ —á–æ—Ä–∏–∑–æ –∏–∑ —Ü—ã–ø–ª–µ–Ω–∫–∞, –ø–µ—Ä–µ—Ü, –º–æ—Ü–∞—Ä–µ–ª–ª–∞ –∏ —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å',
            price: '495',
            isNew: true,
        },
        {
            image: '/images/pizza2.png',
            name: '–ö—Ä–µ–≤–µ—Ç–∫–∏ —Å–æ —Å–ª–∞–¥–∫–∏–º —á–∏–ª–∏',
            description: '–ö—Ä–µ–≤–µ—Ç–∫–∏, –∞–Ω–∞–Ω–∞—Å—ã, —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ—Ü, –º–æ—Ü–∞—Ä–µ–ª–ª–∞ –∏ —Å–æ—É—Å –∞–ª—å—Ñ—Ä–µ–¥–æ',
            price: '545',
            isNew: true,
        },
        {
            image: '/images/pizza3.png',
            name: '–ë–∞–≤–∞—Ä—Å–∫–∞—è',
            description: '–û—Ö–æ—Ç–Ω–∏—á—å–∏ –∫–æ–ª–±–∞—Å–∫–∏, –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ–≥—É—Ä—á–∏–∫–∏, –∫—Ä–∞—Å–Ω—ã–π –ª—É–∫, –≥–æ—Ä—á–∏—á–Ω—ã–π —Å–æ—É—Å –∏ —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å',
            price: '495',
            isNew: true,
        },
        {
            image: '/images/pizza4.png',
            name: '–ß–∏–∫–µ–Ω –ë–æ–º–±–æ–Ω–∏',
            description: '–ö—É—Ä–∏–Ω—ã–µ –∫—É—Å–æ—á–∫–∏, —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä—á–∏–∫, —Å—ã—Ä—ã —á–µ–¥–¥–µ—Ä –∏ –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–æ—É—Å —Å–ª–∞–¥–∫–∏–π —á–∏–ª–∏ –∏ –∞–ª—å—Ñ—Ä–µ–¥–æ',
            price: '495',
            isNew: false,
        },
    ];
    const dispatch = useAppDispatch()
    const data = useAppSelector((state) => state.product.data.results)
    const hasNext = useAppSelector((state) => state.product.data.next)
    const { menuprops } = useAppSelector((state) => state.window)
    const { laoding } = useAppSelector((state) => state.product)

    function next() {
        dispatch(setOffcet((menuprops.offset + 20)))
    }



    const targetId = 'scrollTarget'; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

    useEffect(() => {
        dispatch(setTargetId(targetId)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ Redux
    }, [dispatch]);
    useEffect(() => {
        dispatch(fetchProduct({ filters: formatParams({ menuprops }) }))
    }, [menuprops])
    return (
        <div>
            <h2>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã</h2>
            <br />
            <div id={targetId} className="pizza-list">
                {laoding ?
                    <>
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                        <CardSceleton />
                    </>
                    :
                    <InfiniteScroll
                        dataLength={data.length}
                        next={next}
                        className="pizza-list"
                        hasMore={hasNext !== null}
                        loader={<>
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                            <CardSceleton />
                        </>}
                        endMessage={<Divider plain>–≠—Ç–æ –≤—Å–µ, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ. ü§ê</Divider>}
                        scrollableTarget="scrollableDiv"
                    >
                        {data.map((pizza: IProduct, index) => (
                            <PizzaCard
                                key={index}
                                id={pizza.id}
                                image={pizza.iiko_image}
                                name={pizza.title}
                                description={pizza.description}
                                price={pizza.price}
                                isNew={true}
                            />
                        ))}
                    </InfiniteScroll>}

            </div>
        </div>
    );
};

export default PizzaList;
